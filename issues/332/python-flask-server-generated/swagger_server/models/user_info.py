# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, church: OneOfUserInfoChurch=None):  # noqa: E501
        """UserInfo - a model defined in Swagger

        :param username: The username of this UserInfo.  # noqa: E501
        :type username: str
        :param church: The church of this UserInfo.  # noqa: E501
        :type church: OneOfUserInfoChurch
        """
        self.swagger_types = {
            'username': str,
            'church': OneOfUserInfoChurch
        }

        self.attribute_map = {
            'username': 'username',
            'church': 'church'
        }
        self._username = username
        self._church = church

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this UserInfo.

        user's username  # noqa: E501

        :return: The username of this UserInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserInfo.

        user's username  # noqa: E501

        :param username: The username of this UserInfo.
        :type username: str
        """

        self._username = username

    @property
    def church(self) -> OneOfUserInfoChurch:
        """Gets the church of this UserInfo.

        the id of the church that the user joined  # noqa: E501

        :return: The church of this UserInfo.
        :rtype: OneOfUserInfoChurch
        """
        return self._church

    @church.setter
    def church(self, church: OneOfUserInfoChurch):
        """Sets the church of this UserInfo.

        the id of the church that the user joined  # noqa: E501

        :param church: The church of this UserInfo.
        :type church: OneOfUserInfoChurch
        """

        self._church = church
